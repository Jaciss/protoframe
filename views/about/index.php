<h3>About</h3>
<p>Protoframe was created by some girl in Alaska in response to the need for a simple, flexible, prototype-based AJAX framework.  Part of the design was inspired by XXX.  Protoframe can eliminate inline javascript, allow 'rapid web development', has a shallow learning curve, and solves many (all?) of the problems commonly associated with AJAX-based sites.  Because of the modular nature and simplicity, there are plans to create addons or plugins for additional functionality on an as-needed basis.</p>

<h3>How It Works</h3>
<p>Protoframe assumes/encourages a logical directory structure and uses the URL to determine what section of the site a user is in e.g., 'blog' or 'album'. If the section's javascript file (like blog.js or album.js) has not been loaded it will look in the 'javascript' directory for it, load it if it's there, and register and apply any behaviours defined in it at the appropriate times. This is handled by a javascript 'module' instance, which is used each time the location changes (someone clicks/pastes a link, etc) and can be modified/overwritten by the area's javascript files. The area instance is responsible for defining any specific behaviours or initialize() and execute() methods - if these methods are not defined in blog.js the defaults will be used.</p>

<h3>Example</h3>
<p>Menus are automatically generated, so to create a 'blog' section, we'd create a 'blog' folder, put in an index.inc file and any other content desired - say 10-23-06.inc, a basic text file.  Each file in the 'blog' folder will become a page in the menu.  Were we to click on the generated link for /blog/10-23-06/ the framework would create a new area instance named 'blog' and attempt to load /javascript/blog.js (allowing that file to define the instance's methods) and run initialize() and execute(10-23-06) on it. Were blog.js non-existant, the framework would, instead, run initialize() and execute(10-23-06) with the default methods which would attempt to load /views/blog/10-23-06.inc into the 'content' area and apply defined behaviours to the loaded content.  It would be simplistic to define execute(10-23-06) in blog.js as an AJAX call to Blog.php - returning a blog entry from a database, perhaps.</p>

<p>For more information, please visit <a href="http://jaciss.homeip.net/?home/about/the_framework">jaciss.homeip.net</a></p>